#!/bin/sh

set -eu

CHROME_QA_EXT_ID=iahhmhdkmkifclacffbofcnmgkpalpoj
CHROME_PROD_EXT_ID=bjfhmglciegochdpefhhlphglcehbmek

upload_and_publish_chrome_qa_ext() {
  # Upload and publish staging extension
  CHROME_QA_EXT_ARCHIVE=dist/*-chrome-staging.zip
  if [ ! -f $CHROME_QA_EXT_ARCHIVE ]; then
    echo "Chrome staging extension has not been built."
    exit 1
  fi

./node_modules/.bin/chrome-webstore-upload upload \
  --source $CHROME_QA_EXT_ARCHIVE \
  --extension-id $CHROME_QA_EXT_ID \
  --client-id $CHROME_WEBSTORE_CLIENT_ID \
  --client-secret $CHROME_WEBSTORE_CLIENT_SECRET \
  --refresh-token $CHROME_WEBSTORE_REFRESH_TOKEN \
  --auto-publish
}

upload_chrome_prod_ext() {
  # Upload (but do not publish) prod extension
  CHROME_PROD_EXT_ARCHIVE=dist/*-chrome-prod.zip
  if [ ! -f $CHROME_PROD_EXT_ARCHIVE ]; then
    echo "Chrome prod extension has not been built."
    exit 1
  fi

  ./node_modules/.bin/chrome-webstore-upload upload \
    --source $CHROME_PROD_EXT_ARCHIVE \
    --extension-id $CHROME_PROD_EXT_ID \
    --client-id $CHROME_WEBSTORE_CLIENT_ID \
    --client-secret $CHROME_WEBSTORE_CLIENT_SECRET \
    --refresh-token $CHROME_WEBSTORE_REFRESH_TOKEN
}

# Upload a Firefox extension to addons.mozilla.org for automated validation and
# signing. Write log output to `ext_source_dir/log.txt`.
#
# Arguments:
#   ext_id - ID of the Firefox extension
#   ext_source_dir - Directory containing source files for the extension.
# Returns:
#   0 if extension was successfully signed and downloaded to `ext_source_dir`.
run_webext_sign() {
  ext_id=$1
  ext_source_dir=$2

  # Make pipeline below fail if `webext` fails.
  set -o pipefail

  # Run `web-ext sign` and filter out progress message spam, as webext is not
  # smart enough to do this itself if not connected to a TTY.
  node_modules/.bin/web-ext sign \
    --api-key $FIREFOX_AMO_KEY \
    --api-secret $FIREFOX_AMO_SECRET \
    --id "$ext_id" \
    --source-dir $ext_source_dir \
    --artifacts-dir $ext_source_dir \
    | grep -E -v "(Signing|Validating) add-on \[" \
    | grep -E -v "Downloading signed files:" \
    > $ext_source_dir/log.txt
}

sign_firefox_exts() {
  # Unpack the Firefox extensions ready for upload to addons.mozilla.org.
  FIREFOX_QA_EXT_ID="{b441de5f-18e6-40ad-a8c2-f1bd2d42cb01}"
  rm -rf dist/firefox-staging
  unzip -q dist/*-firefox-staging.xpi -d dist/firefox-staging

  FIREFOX_PROD_EXT_ID="{32492fee-2d9f-49fe-b268-fe213f7019f0}"
  rm -rf dist/firefox-prod
  unzip -q dist/*-firefox-prod.xpi -d dist/firefox-prod

  # Upload the Firefox extensions and wait for signing to complete.
  # This may take several minutes for each extension, so we do this for the
  # staging and prod extensions in parallel.
  run_webext_sign "$FIREFOX_QA_EXT_ID" dist/firefox-staging &
  qa_sign_pid=$!

  run_webext_sign "$FIREFOX_PROD_EXT_ID" dist/firefox-prod &
  prod_sign_pid=$!

  echo "Waiting for Firefox staging signing to complete..."
  status=0
  wait $qa_sign_pid || status=$?
  cat dist/firefox-staging/log.txt
  if [[ $status -ne 0 ]]; then
    echo "Signing Firefox staging extension failed"
    exit 1
  fi

  echo "Waiting for Firefox prod signing to complete..."
  status=0
  wait $prod_sign_pid || status=$?
  cat dist/firefox-prod/log.txt
  if [[ $status -ne 0 ]]; then
    echo "Signing Firefox prod extension failed"
    exit 1
  fi

  echo "Successfully signed Firefox extensions"
}

echo "Uploading and publishing Chrome (staging) extension..."
upload_and_publish_chrome_qa_ext

echo "Uploading Chrome (prod) extension..."
upload_chrome_prod_ext

# 2021-10-05: Disabled because Mozilla's web services are having problems and
# timing out when signing the extension.
#
# echo "Signing Firefox extensions..."
# sign_firefox_exts
