{
  "extends": ["hypothesis", "plugin:@typescript-eslint/recommended"],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "rules": {
    "prefer-arrow-callback": ["error", { "allowNamedFunctions": true }],
    "object-shorthand": ["error", "properties"],

    // Upgrade TS rules from warning to error.
    "@typescript-eslint/no-unused-vars": "error",

    // Disable TS rules that we dislike.
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
    "@typescript-eslint/no-this-alias": "off",

    // Enforce consistency in cases where TypeScript supports old and new
    // syntaxes for the same thing.
    //
    // - Require `<var> as <type>` for casts
    // - Require `import type` for type imports. The corresponding rule for
    //   exports is not enabled yet because that requires setting up type-aware
    //   linting.
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-imports": "error"
  },
  "globals": {
    "chrome": false
  },
  "overrides": [
    {
      "files": [
        "gulpfile.js",
        "tests/karma.config.js",

        // Entry points which currently get loaded as non-module scripts.
        "src/help/index.js",
        "src/pdfjs-init.js",
        "src/options/options.js",
        "src/unload-client.js"
      ],
      "parserOptions": {
        "sourceType": "script"
      }
    },
    {
      "files": ["gulpfile.js", "tests/karma.config.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    }
  ]
}
